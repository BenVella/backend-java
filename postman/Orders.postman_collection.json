{
	"info": {
		"_postman_id": "8facaa85-3281-4778-b536-54dd339bffe1",
		"name": "Orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3837818"
	},
	"item": [
		{
			"name": "api/auth/signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"newuser6\",\r\n    \"password\": \"securepassword\",\r\n    \"email\": \"newuser6@example.com\",\r\n    \"roles\": [\"ROLE_USER\"]\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/api/auth/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": [
				{
					"name": "http://localhost:8080/auth/signup",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"newuser2\",\r\n    \"password\": \"securepassword\",\r\n    \"email\": \"newuser2@example.com\",\r\n    \"roles\": [\"ROLE_USER\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/signup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Sun, 23 Mar 2025 16:09:10 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"User registered successfully!\"\n}"
				}
			]
		},
		{
			"name": "api/auth/signin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Check if the accessToken exists in the response\r",
							"if (responseData.accessToken) {\r",
							"    // Store the accessToken in the Postman collection variable\r",
							"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken);\r",
							"    console.log(\"Access token stored in collection variable: \" + responseData.accessToken);\r",
							"} else {\r",
							"    console.log(\"Access token not found in the response.\");\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains accessToken\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
							"    pm.expect(jsonData.accessToken).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains username\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"username\", \"newuser\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains email\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"email\", \"newuser@example.com\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains roles\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"roles\");\r",
							"    pm.expect(jsonData.roles).to.include(\"ROLE_USER\");\r",
							"});\r",
							"\r",
							"pm.test(\"Token type is Bearer\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tokenType).to.equal(\"Bearer\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/api/auth/signin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"auth",
						"signin"
					]
				}
			},
			"response": [
				{
					"name": "api/auth/signin",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Sun, 23 Mar 2025 16:04:55 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"accessToken\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuZXd1c2VyIiwiaWF0IjoxNzQyNzQ1ODk1LCJleHAiOjE3NDI4MzIyOTV9.3FwHDpQxWWgxvdHvF5y95szcviipmpMovjFTbgCUm4U\",\n    \"id\": 2,\n    \"username\": \"newuser\",\n    \"email\": \"newuser@example.com\",\n    \"roles\": [\n        \"ROLE_USER\"\n    ],\n    \"tokenType\": \"Bearer\"\n}"
				}
			]
		},
		{
			"name": "api/orders",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"orderId\": 1234,\r\n    \"customerId\": 4567,\r\n    \"orderDate\": \"2023-10-31\",\r\n    \"items\": [\r\n        {\r\n            \"productId\": 1001,\r\n            \"quantity\": 2,\r\n            \"unitPrice\": 25.5\r\n        },\r\n        {\r\n            \"productId\": 2002,\r\n            \"quantity\": 1,\r\n            \"unitPrice\": 50.0\r\n        }\r\n    ],\r\n    \"totalAmount\": 101.0\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/api/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"orders"
					]
				}
			},
			"response": [
				{
					"name": "api/orders",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderId\": 1234,\r\n    \"customerId\": 4567,\r\n    \"orderDate\": \"2023-10-31\",\r\n    \"items\": [\r\n        {\r\n            \"productId\": 1001,\r\n            \"quantity\": 2,\r\n            \"unitPrice\": 25.5\r\n        },\r\n        {\r\n            \"productId\": 2002,\r\n            \"quantity\": 1,\r\n            \"unitPrice\": 50.0\r\n        }\r\n    ],\r\n    \"totalAmount\": 101.0\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"orders"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "26"
						},
						{
							"key": "Date",
							"value": "Sun, 23 Mar 2025 16:08:05 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "Order created successfully"
				}
			]
		},
		{
			"name": "api/orders NoAuth failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(401);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('path');\r",
							"    pm.expect(responseData).to.have.property('error');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Path is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.path).to.be.a(\"string\").and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Error is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.error).to.be.a(\"string\").and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.be.a(\"string\").and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"orderId\": 1234,\r\n    \"customerId\": 4567,\r\n    \"orderDate\": \"2023-10-31\",\r\n    \"items\": [\r\n        {\r\n            \"productId\": 1001,\r\n            \"quantity\": 2,\r\n            \"unitPrice\": 25.5\r\n        },\r\n        {\r\n            \"productId\": 2002,\r\n            \"quantity\": 1,\r\n            \"unitPrice\": 50.0\r\n        }\r\n    ],\r\n    \"totalAmount\": 101.0\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/api/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"orders"
					]
				}
			},
			"response": [
				{
					"name": "api/orders NoAuth failure",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderId\": 1234,\r\n    \"customerId\": 4567,\r\n    \"orderDate\": \"2023-10-31\",\r\n    \"items\": [\r\n        {\r\n            \"productId\": 1001,\r\n            \"quantity\": 2,\r\n            \"unitPrice\": 25.5\r\n        },\r\n        {\r\n            \"productId\": 2002,\r\n            \"quantity\": 1,\r\n            \"unitPrice\": 50.0\r\n        }\r\n    ],\r\n    \"totalAmount\": 101.0\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"orders"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "126"
						},
						{
							"key": "Date",
							"value": "Sun, 23 Mar 2025 16:08:29 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"path\": \"/api/orders\",\n    \"error\": \"Unauthorized\",\n    \"message\": \"Full authentication is required to access this resource\",\n    \"status\": 401\n}"
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "password",
			"value": "securepassword"
		},
		{
			"key": "username",
			"value": "newuser"
		}
	]
}